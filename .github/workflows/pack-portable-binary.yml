name: Pack & Release & Update Dockerfile

on:
  workflow_dispatch:
  schedule:
    - cron: '15 1 * * *'

permissions:
  contents: write
  actions: write

jobs:
  pack-and-release:
    runs-on: ubuntu-latest
    outputs:
      should_pack: ${{ steps.version_check.outputs.should_pack }}
      github_tag: ${{ steps.get_github_tag.outputs.tag }}
      docker_tag: ${{ steps.get_docker_tag.outputs.tag }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Get latest lobehub/lobe-chat-database docker tag
        id: get_docker_tag
        run: |
          echo "Fetching Docker Hub tags..."
          TAGS_JSON=$(curl -s 'https://registry.hub.docker.com/v2/repositories/lobehub/lobe-chat-database/tags?page_size=100')
          LATEST_VERSION=$(echo "$TAGS_JSON" | jq -r '.results[].name' | \
            grep -E '^v?[0-9]+\.[0-9]+\.[0-9]+(-[a-zA-Z0-9\.\-]+)?$' | \
            grep -v -E '^(latest|nightly|dev|alpha|beta|rc)$' | \
            sort -rV | \
            head -n1)
          if [ -z "$LATEST_VERSION" ]; then
            echo "No semantic version found, trying alternative patterns..."
            LATEST_VERSION=$(echo "$TAGS_JSON" | jq -r '.results[].name' | \
              grep -E '^[0-9]+\.[0-9]+' | \
              grep -v -E '^(latest|nightly|dev)$' | \
              sort -rV | \
              head -n1)
          fi
          if [ -z "$LATEST_VERSION" ]; then
            echo "ERROR: No valid version tag found in Docker Hub"
            exit 1
          fi
          echo "LATEST_TAG=$LATEST_VERSION" >> $GITHUB_ENV
          echo "tag=$LATEST_VERSION" >> $GITHUB_OUTPUT
          echo "Docker latest version tag: $LATEST_VERSION"

      - name: Get latest ssfun/lobe-chat-database GitHub release tag
        id: get_github_tag
        run: |
          RESPONSE=$(curl -s -w "\n%{http_code}" 'https://api.github.com/repos/ssfun/lobe-chat-database/releases/latest')
          HTTP_CODE=$(echo "$RESPONSE" | tail -n1)
          BODY=$(echo "$RESPONSE" | head -n-1)
          if [ "$HTTP_CODE" = "404" ]; then
            GITHUB_TAG="v0.0.0"
          elif [ "$HTTP_CODE" = "200" ]; then
            GITHUB_TAG=$(echo "$BODY" | jq -r '.tag_name')
            if [ "$GITHUB_TAG" = "null" ] || [ -z "$GITHUB_TAG" ]; then
              GITHUB_TAG="v0.0.0"
            fi
          else
            GITHUB_TAG=$(curl -s 'https://api.github.com/repos/ssfun/lobe-chat-database/tags' | \
              jq -r '.[].name' | \
              grep -E '^v?[0-9]+\.[0-9]+' | \
              sort -rV | \
              head -n1)
            if [ -z "$GITHUB_TAG" ]; then
              GITHUB_TAG="v0.0.0"
            fi
          fi
          echo "GITHUB_TAG=$GITHUB_TAG" >> $GITHUB_ENV
          echo "tag=$GITHUB_TAG" >> $GITHUB_OUTPUT
          echo "GitHub latest tag: $GITHUB_TAG"

      - name: Compare versions and decide if packing is needed
        id: version_check
        run: |
          DOCKER_VERSION="${LATEST_TAG#v}"
          GITHUB_VERSION="${GITHUB_TAG#v}"
          echo "Docker version: $DOCKER_VERSION, GitHub version: $GITHUB_VERSION"
          version_gt() {
            [ "$(printf '%s\n' "$1" "$2" | sort -V | head -n1)" != "$1" ]
          }
          if [ "$DOCKER_VERSION" = "$GITHUB_VERSION" ]; then
            echo "Versions are identical, no need to pack"
            echo "should_pack=false" >> $GITHUB_OUTPUT
          elif version_gt "$DOCKER_VERSION" "$GITHUB_VERSION"; then
            echo "Docker version is newer, proceeding to pack"
            echo "should_pack=true" >> $GITHUB_OUTPUT
          else
            echo "Docker version is not newer"
            echo "should_pack=false" >> $GITHUB_OUTPUT
          fi

  pack-binaries:
    needs: pack-and-release
    if: needs.pack-and-release.outputs.should_pack == 'true'
    runs-on: ubuntu-latest
    outputs:
      release_created: ${{ steps.set_release_output.outputs.release_created }}
      version_tag: ${{ needs.pack-and-release.outputs.docker_tag }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up dependencies for dockerc
        run: |
          sudo apt-get update
          sudo apt-get install -y fuse overlayroot squashfs-tools skopeo jq curl

      - name: Download dockerc
        run: |
          wget -O dockerc https://github.com/NilsIrl/dockerc/releases/download/v0.3.2/dockerc_x86-64
          chmod +x ./dockerc

      - name: Pack linux/amd64
        run: |
          ./dockerc --image docker://lobehub/lobe-chat-database:${{ needs.pack-and-release.outputs.docker_tag }} \
            --arch amd64 \
            --output lobe-chat-${{ needs.pack-and-release.outputs.docker_tag }}-linux-amd64.bin

      - name: Pack linux/arm64
        run: |
          ./dockerc --image docker://lobehub/lobe-chat-database:${{ needs.pack-and-release.outputs.docker_tag }} \
            --arch arm64 \
            --output lobe-chat-${{ needs.pack-and-release.outputs.docker_tag }}-linux-arm64.bin

      - name: Generate SHA256 checksums
        run: |
          sha256sum lobe-chat-*.bin > checksums.txt

      - name: Create GitHub Release
        id: create_release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ needs.pack-and-release.outputs.docker_tag }}
          name: "Release ${{ needs.pack-and-release.outputs.docker_tag }}"
          files: |
            lobe-chat-*.bin
            checksums.txt
          token: ${{ secrets.GITHUB_TOKEN }}
          body: |
            Automated Release for ${{ needs.pack-and-release.outputs.docker_tag }}

      - name: Set release output
        id: set_release_output
        if: always()
        run: |
          if [ "${{ steps.create_release.outcome }}" == "success" ]; then
            echo "release_created=true" >> $GITHUB_OUTPUT
          else
            echo "release_created=false" >> $GITHUB_OUTPUT
          fi

  update-dockerfile:
    needs: [pack-binaries]
    if: |
      always() && 
      needs.pack-binaries.result == 'success' && 
      needs.pack-binaries.outputs.release_created == 'true'
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          fetch-depth: 0

      - name: Update Dockerfile version
        env:
          VERSION_TAG: ${{ needs.pack-binaries.outputs.version_tag }}
        run: |
          echo "Updating Dockerfile with version: ${VERSION_TAG}"
          
          # 检查 Dockerfile 是否存在
          if [ ! -f "Dockerfile" ]; then
            echo "ERROR: Dockerfile not found in repository root"
            exit 1
          fi
          
          # 备份原始 Dockerfile
          cp Dockerfile Dockerfile.backup
          
          # 更新 Dockerfile 中的版本号
          # 支持带或不带 'v' 前缀的版本号
          sed -i "s|FROM lobehub/lobe-chat-database:.*|FROM lobehub/lobe-chat-database:${VERSION_TAG}|g" Dockerfile
          
          # 验证更新是否成功
          if grep -q "FROM lobehub/lobe-chat-database:${VERSION_TAG}" Dockerfile; then
            echo "✅ Dockerfile updated successfully"
            echo "New content:"
            cat Dockerfile
          else
            echo "❌ Failed to update Dockerfile"
            mv Dockerfile.backup Dockerfile
            exit 1
          fi
          
          # 删除备份文件
          rm -f Dockerfile.backup

      - name: Commit and push changes
        env:
          VERSION_TAG: ${{ needs.pack-binaries.outputs.version_tag }}
        run: |
          # 配置 Git
          git config --local user.email "github-actions[bot]@users.noreply.github.com"
          git config --local user.name "github-actions[bot]"
          
          # 检查是否有更改
          if git diff --quiet Dockerfile; then
            echo "No changes detected in Dockerfile"
            exit 0
          fi
          
          # 添加更改
          git add Dockerfile
          
          # 提交更改
          COMMIT_MESSAGE="chore: update Dockerfile to version ${VERSION_TAG}

          Automated update by GitHub Actions workflow.
          - Updated lobehub/lobe-chat-database image to ${VERSION_TAG}
          - Release: https://github.com/${{ github.repository }}/releases/tag/${VERSION_TAG}"
          
          git commit -m "${COMMIT_MESSAGE}"
          
          # 推送更改
          git push origin HEAD:${{ github.ref }}
          
          echo "✅ Changes committed and pushed successfully"

      - name: Send Telegram notification
        if: success()
        env:
          TELEGRAM_BOT_TOKEN: ${{ secrets.TELEGRAM_BOT_TOKEN }}
          TELEGRAM_CHAT_ID: ${{ secrets.TELEGRAM_CHAT_ID }}
          VERSION_TAG: ${{ needs.pack-binaries.outputs.version_tag }}
        run: |
          if [ ! -z "${TELEGRAM_BOT_TOKEN}" ] && [ ! -z "${TELEGRAM_CHAT_ID}" ]; then
            TEXT_CONTENT="🚀 *Lobe Chat Update Success*\\n\\n📦 *Version:* \`${VERSION_TAG}\`\\n📝 *Action:* Dockerfile updated\\n⏰ *Time:* $(date -u '+%Y-%m-%d %H:%M:%S UTC')\\n✅ *Status:* Successfully updated and committed\\n\\n🔗 [View Release](https://github.com/${{ github.repository }}/releases/tag/${VERSION_TAG})\\n📄 [View Commit](https://github.com/${{ github.repository }}/commit/HEAD)"
            JSON_PAYLOAD=$(printf '{"chat_id": "%s", "parse_mode": "Markdown", "disable_web_page_preview": true, "text": "%s"}' \
              "${TELEGRAM_CHAT_ID}" \
              "${TEXT_CONTENT}")
            curl -s -X POST "https://api.telegram.org/bot${TELEGRAM_BOT_TOKEN}/sendMessage" \
              -H "Content-Type: application/json" \
              -d "${JSON_PAYLOAD}"
          fi

  notify-failure:
    needs: [pack-binaries, update-dockerfile]
    if: |
      always() && 
      (needs.pack-binaries.result == 'failure' || needs.update-dockerfile.result == 'failure')
    runs-on: ubuntu-latest
    steps:
      - name: Send failure notification
        env:
          TELEGRAM_BOT_TOKEN: ${{ secrets.TELEGRAM_BOT_TOKEN }}
          TELEGRAM_CHAT_ID: ${{ secrets.TELEGRAM_CHAT_ID }}
        run: |
          if [ ! -z "${TELEGRAM_BOT_TOKEN}" ] && [ ! -z "${TELEGRAM_CHAT_ID}" ]; then
            FAILED_STAGE="Unknown"
            if [ "${{ needs.pack-binaries.result }}" == "failure" ]; then
              FAILED_STAGE="Pack & Release"
            elif [ "${{ needs.update-dockerfile.result }}" == "failure" ]; then
              FAILED_STAGE="Dockerfile Update"
            fi
            TEXT_CONTENT="❌ *Lobe Chat Pipeline Failed*\\n\\n⚠️ *Failed Stage:* ${FAILED_STAGE}\\n⏰ *Time:* $(date -u '+%Y-%m-%d %H:%M:%S UTC')\\n📝 *Workflow:* ${{ github.workflow }}\\n🔗 [View Details](${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }})"
            JSON_PAYLOAD=$(printf '{"chat_id": "%s", "parse_mode": "Markdown", "disable_web_page_preview": true, "text": "%s"}' \
              "${TELEGRAM_CHAT_ID}" \
              "${TEXT_CONTENT}")
            curl -s -X POST "https://api.telegram.org/bot${TELEGRAM_BOT_TOKEN}/sendMessage" \
              -H "Content-Type: application/json" \
              -d "${JSON_PAYLOAD}"
          fi
          
  cleanup-runs:
    runs-on: ubuntu-latest
    needs: [update-dockerfile, notify-failure]
    if: always()
    steps:
      - name: Delete old workflow runs
        uses: Mattraks/delete-workflow-runs@v2
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          repository: ${{ github.repository }}
          retain_days: 7
          keep_minimum_runs: 6
