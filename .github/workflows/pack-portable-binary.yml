name: Pack & Release & Deploy Portable Binary

on:
  workflow_dispatch:
  schedule:
    - cron: '15 1 * * *'

permissions:
  contents: write

jobs:
  pack-and-release:
    runs-on: ubuntu-latest
    outputs:
      should_pack: ${{ steps.version_check.outputs.should_pack }}
      github_tag: ${{ steps.get_github_tag.outputs.tag }}
      docker_tag: ${{ steps.get_docker_tag.outputs.tag }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Get latest lobehub/lobe-chat-database docker tag
        id: get_docker_tag
        run: |
          # 获取所有标签，过滤掉 latest 和非版本标签
          echo "Fetching Docker Hub tags..."
          
          # 获取前100个标签（通常足够找到最新版本）
          TAGS_JSON=$(curl -s 'https://registry.hub.docker.com/v2/repositories/lobehub/lobe-chat-database/tags?page_size=100')
          
          # 提取所有标签名，过滤出版本号格式的标签（v开头或纯数字版本）
          # 排除 latest, nightly, dev 等非版本标签
          LATEST_VERSION=$(echo "$TAGS_JSON" | jq -r '.results[].name' | \
            grep -E '^v?[0-9]+\.[0-9]+\.[0-9]+(-[a-zA-Z0-9\.\-]+)?$' | \
            grep -v -E '^(latest|nightly|dev|alpha|beta|rc)$' | \
            sort -rV | \
            head -n1)
          
          # 如果没有找到版本标签，尝试其他模式
          if [ -z "$LATEST_VERSION" ]; then
            echo "No semantic version found, trying alternative patterns..."
            LATEST_VERSION=$(echo "$TAGS_JSON" | jq -r '.results[].name' | \
              grep -E '^[0-9]+\.[0-9]+' | \
              grep -v -E '^(latest|nightly|dev)$' | \
              sort -rV | \
              head -n1)
          fi
          
          # 确保找到了有效的版本
          if [ -z "$LATEST_VERSION" ]; then
            echo "ERROR: No valid version tag found in Docker Hub"
            exit 1
          fi
          
          echo "LATEST_TAG=$LATEST_VERSION" >> $GITHUB_ENV
          echo "tag=$LATEST_VERSION" >> $GITHUB_OUTPUT
          echo "Docker latest version tag: $LATEST_VERSION"

      - name: Get latest ssfun/lobe-chat-database GitHub release tag
        id: get_github_tag
        run: |
          # 尝试获取最新的 release
          RESPONSE=$(curl -s -w "\n%{http_code}" 'https://api.github.com/repos/ssfun/lobe-chat-database/releases/latest')
          HTTP_CODE=$(echo "$RESPONSE" | tail -n1)
          BODY=$(echo "$RESPONSE" | head -n-1)
          
          if [ "$HTTP_CODE" = "404" ]; then
            echo "No releases found in GitHub repository"
            GITHUB_TAG="v0.0.0"
            echo "Using default version: $GITHUB_TAG"
          elif [ "$HTTP_CODE" = "200" ]; then
            GITHUB_TAG=$(echo "$BODY" | jq -r '.tag_name')
            if [ "$GITHUB_TAG" = "null" ] || [ -z "$GITHUB_TAG" ]; then
              echo "No valid tag found in latest release"
              GITHUB_TAG="v0.0.0"
              echo "Using default version: $GITHUB_TAG"
            else
              echo "Found GitHub release tag: $GITHUB_TAG"
            fi
          else
            echo "Failed to fetch GitHub releases. HTTP Code: $HTTP_CODE"
            echo "Response: $BODY"
            # 尝试获取所有标签作为备选方案
            echo "Trying to fetch tags instead..."
            GITHUB_TAG=$(curl -s 'https://api.github.com/repos/ssfun/lobe-chat-database/tags' | \
              jq -r '.[].name' | \
              grep -E '^v?[0-9]+\.[0-9]+' | \
              sort -rV | \
              head -n1)
            
            if [ -z "$GITHUB_TAG" ]; then
              GITHUB_TAG="v0.0.0"
              echo "No tags found, using default: $GITHUB_TAG"
            else
              echo "Found GitHub tag: $GITHUB_TAG"
            fi
          fi
          
          echo "GITHUB_TAG=$GITHUB_TAG" >> $GITHUB_ENV
          echo "tag=$GITHUB_TAG" >> $GITHUB_OUTPUT
          echo "GitHub latest tag: $GITHUB_TAG"

      - name: Compare versions and decide if packing is needed
        id: version_check
        run: |
          # 标准化版本号格式（移除 v 前缀）
          DOCKER_VERSION="${LATEST_TAG#v}"
          GITHUB_VERSION="${GITHUB_TAG#v}"
          
          echo "Comparing versions:"
          echo "Docker version: $DOCKER_VERSION"
          echo "GitHub version: $GITHUB_VERSION"
          
          # 版本比较函数
          version_gt() {
            # 使用 sort -V 进行版本比较
            # 如果第一个版本大于第二个版本，返回 0（true）
            [ "$(printf '%s\n' "$1" "$2" | sort -V | head -n1)" != "$1" ]
          }
          
          # 检查版本是否相同
          if [ "$DOCKER_VERSION" = "$GITHUB_VERSION" ]; then
            echo "Versions are identical, no need to pack"
            echo "should_pack=false" >> $GITHUB_OUTPUT
          elif version_gt "$DOCKER_VERSION" "$GITHUB_VERSION"; then
            echo "Docker version ($DOCKER_VERSION) is newer than GitHub version ($GITHUB_VERSION)"
            echo "should_pack=true" >> $GITHUB_OUTPUT
          else
            echo "Docker version ($DOCKER_VERSION) is not newer than GitHub version ($GITHUB_VERSION)"
            echo "should_pack=false" >> $GITHUB_OUTPUT
          fi
          
          # 输出决策摘要
          echo "---"
          echo "Decision summary:"
          echo "  Docker Hub version: v$DOCKER_VERSION"
          echo "  GitHub Release version: v$GITHUB_VERSION"
          echo "  Should pack: $([ "$DOCKER_VERSION" != "$GITHUB_VERSION" ] && version_gt "$DOCKER_VERSION" "$GITHUB_VERSION" && echo "YES" || echo "NO")"

  pack-binaries:
    needs: pack-and-release
    if: needs.pack-and-release.outputs.should_pack == 'true'
    runs-on: ubuntu-latest
    outputs:
      release_created: ${{ steps.set_release_output.outputs.release_created }}
      version_tag: ${{ needs.pack-and-release.outputs.docker_tag }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up dependencies for dockerc
        run: |
          sudo apt-get update
          sudo apt-get install -y fuse overlayroot squashfs-tools skopeo jq curl

      - name: Download dockerc
        run: |
          wget -O dockerc https://github.com/NilsIrl/dockerc/releases/download/v0.3.2/dockerc_x86-64
          chmod +x ./dockerc

      - name: Pack lobehub/lobe-chat-database:${{ needs.pack-and-release.outputs.docker_tag }} for linux/amd64
        run: |
          echo "Packing AMD64 binary for version: ${{ needs.pack-and-release.outputs.docker_tag }}"
          ./dockerc --image docker://lobehub/lobe-chat-database:${{ needs.pack-and-release.outputs.docker_tag }} \
            --arch amd64 \
            --output lobe-chat-${{ needs.pack-and-release.outputs.docker_tag }}-linux-amd64.bin

      - name: Pack lobehub/lobe-chat-database:${{ needs.pack-and-release.outputs.docker_tag }} for linux/arm64
        run: |
          echo "Packing ARM64 binary for version: ${{ needs.pack-and-release.outputs.docker_tag }}"
          ./dockerc --image docker://lobehub/lobe-chat-database:${{ needs.pack-and-release.outputs.docker_tag }} \
            --arch arm64 \
            --output lobe-chat-${{ needs.pack-and-release.outputs.docker_tag }}-linux-arm64.bin

      - name: Generate SHA256 checksums
        run: |
          sha256sum lobe-chat-${{ needs.pack-and-release.outputs.docker_tag }}-linux-amd64.bin > checksums.txt
          sha256sum lobe-chat-${{ needs.pack-and-release.outputs.docker_tag }}-linux-arm64.bin >> checksums.txt
          echo "Generated checksums:"
          cat checksums.txt

      - name: Upload all bins to Release
        id: create_release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ needs.pack-and-release.outputs.docker_tag }}
          files: |
            lobe-chat-${{ needs.pack-and-release.outputs.docker_tag }}-linux-amd64.bin
            lobe-chat-${{ needs.pack-and-release.outputs.docker_tag }}-linux-arm64.bin
            checksums.txt
          token: ${{ secrets.GITHUB_TOKEN }}
          title: "Release ${{ needs.pack-and-release.outputs.docker_tag }}"
          body: |
            ## 🚀 Automated Release for lobe-chat ${{ needs.pack-and-release.outputs.docker_tag }}
            
            ### 📦 Version Information
            - **Docker image version:** `${{ needs.pack-and-release.outputs.docker_tag }}`
            - **Previous GitHub release:** `${{ needs.pack-and-release.outputs.github_tag }}`
            - **Release date:** `${{ github.event.head_commit.timestamp }}`
            
            ### 📥 Downloads
            This release contains portable binary executables packed from the official Docker image.
            
            | Platform | Architecture | File |
            |----------|-------------|------|
            | Linux | x86_64/amd64 | `lobe-chat-${{ needs.pack-and-release.outputs.docker_tag }}-linux-amd64.bin` |
            | Linux | arm64/aarch64 | `lobe-chat-${{ needs.pack-and-release.outputs.docker_tag }}-linux-arm64.bin` |
            
            ### 🔒 Verification
            SHA256 checksums are available in `checksums.txt`
            
            ### 📝 Usage
            ```bash
            # Download the binary
            wget [https://github.com/ssfun/lobe-chat-database/releases/download/$](https://github.com/ssfun/lobe-chat-database/releases/download/$){{ needs.pack-and-release.outputs.docker_tag }}/lobe-chat-${{ needs.pack-and-release.outputs.docker_tag }}-linux-amd64.bin
            
            # Make it executable
            chmod +x lobe-chat-${{ needs.pack-and-release.outputs.docker_tag }}-linux-amd64.bin
            
            # Run
            ./lobe-chat-${{ needs.pack-and-release.outputs.docker_tag }}-linux-amd64.bin
            ```
            
            ### 🐳 Docker Image
            Original Docker image: `lobehub/lobe-chat-database:${{ needs.pack-and-release.outputs.docker_tag }}`
            
            ---
            *This release was automatically generated from the Docker Hub image.*

      - name: Set release output
        id: set_release_output
        if: always()
        run: |
          # 检查上一步是否成功
          if [ "${{ steps.create_release.outcome }}" == "success" ]; then
            echo "Release created successfully"
            echo "release_created=true" >> $GITHUB_OUTPUT
          else
            echo "Release creation failed or skipped"
            echo "release_created=false" >> $GITHUB_OUTPUT
          fi
          
          # 调试输出
          echo "::notice ::Release creation status: ${{ steps.create_release.outcome }}"
          echo "::notice ::Release will trigger deployment: $([ "${{ steps.create_release.outcome }}" == "success" ] && echo "YES" || echo "NO")"

  deploy-to-server:
    needs: [pack-binaries]
    if: |
      always() && 
      needs.pack-binaries.result == 'success' && 
      needs.pack-binaries.outputs.release_created == 'true'
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        server: [server1]

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Debug deployment trigger
        run: |
          echo "::notice ::Starting deployment to ${{ matrix.server }}"
          echo "Release created: ${{ needs.pack-binaries.outputs.release_created }}"
          echo "Version tag: ${{ needs.pack-binaries.outputs.version_tag }}"
          echo "Pack binaries result: ${{ needs.pack-binaries.result }}"

      - name: Check server configuration
        env:
          SERVER_HOST: ${{ secrets[format('{0}_HOST', matrix.server)] }}
          SERVER_USER: ${{ secrets[format('{0}_USER', matrix.server)] }}
          LOBE_CHAT_ENV: ${{ secrets[format('{0}_LOBE_CHAT_ENV', matrix.server)] }}
        run: |
          # 检查必需的配置是否存在
          if [ -z "${SERVER_HOST}" ] || [ -z "${SERVER_USER}" ]; then
            echo "::error ::Missing required secrets for ${{ matrix.server }}"
            echo "Please configure the following secrets in your repository:"
            echo "  - ${{ matrix.server }}_HOST"
            echo "  - ${{ matrix.server }}_USER"
            echo "  - ${{ matrix.server }}_PASSWORD"
            exit 1
          fi
          echo "Server configuration verified for ${{ matrix.server }}"

      - name: Deploy to ${{ matrix.server }}
        env:
          SERVER_HOST: ${{ secrets[format('{0}_HOST', matrix.server)] }}
          SERVER_USER: ${{ secrets[format('{0}_USER', matrix.server)] }}
          SERVER_PASSWORD: ${{ secrets[format('{0}_PASSWORD', matrix.server)] }}
          SERVER_PORT: ${{ secrets[format('{0}_PORT', matrix.server)] || '22' }}
          LOBE_CHAT_ENV: ${{ secrets[format('{0}_LOBE_CHAT_ENV', matrix.server)] || '' }}
          VERSION_TAG: ${{ needs.pack-binaries.outputs.version_tag }}
        run: |
          # 安装 sshpass 用于密码登录
          sudo apt-get update && sudo apt-get install -y sshpass
          
          echo "Deploying version ${VERSION_TAG} to ${SERVER_HOST}"
          
          # 创建部署脚本 (已修复)
          cat > deploy.sh << 'EOF'
          #!/bin/bash
          set -e
          
          VERSION_TAG="${1}"
          shift # 移除第一个参数
          LOBE_CHAT_ENV="$@" # 剩余的所有参数作为环境变量
          
          echo "========================================="
          echo "Starting deployment of lobe-chat"
          echo "Version: ${VERSION_TAG}"
          echo "Time: $(date)"
          echo "========================================="
          
          # 检测是否为 root 用户或具有 sudo 权限
          SUDO_CMD=""
          if [ "$EUID" -ne 0 ]; then
            if command -v sudo >/dev/null 2>&1 && sudo -n true 2>/dev/null; then
              SUDO_CMD="sudo"
              echo "Running with sudo privileges"
            else
              echo "Running as non-root user without sudo"
            fi
          else
            echo "Running as root user"
          fi
          
          # [修复] 确保 ss 命令可用，用于后续端口检查
          if ! command -v ss >/dev/null 2>&1; then
            echo "Installing iproute2 for ss command..."
            ${SUDO_CMD} apt-get update
            ${SUDO_CMD} apt-get install -y iproute2
          fi
          
          # 检测系统架构
          ARCH=$(uname -m)
          case ${ARCH} in
            x86_64)
              BINARY_ARCH="amd64"
              ;;
            aarch64|arm64)
              BINARY_ARCH="arm64"
              ;;
            *)
              echo "ERROR: Unsupported architecture: ${ARCH}"
              exit 1
              ;;
          esac
          
          echo "System architecture: ${ARCH} (binary: ${BINARY_ARCH})"
          
          # 下载对应架构的二进制文件
          DOWNLOAD_URL="https://github.com/ssfun/lobe-chat-database/releases/download/${VERSION_TAG}/lobe-chat-${VERSION_TAG}-linux-${BINARY_ARCH}.bin"
          echo "Download URL: ${DOWNLOAD_URL}"
          
          # 创建临时目录
          TEMP_DIR=$(mktemp -d)
          cd ${TEMP_DIR}
          echo "Working in temporary directory: ${TEMP_DIR}"
          
          # 下载二进制文件（带重试机制）
          echo "Downloading binary file..."
          for i in {1..3}; do
            if wget --progress=dot:giga -O lobe-chat.bin "${DOWNLOAD_URL}"; then
              echo "Download completed successfully"
              break
            else
              echo "Download attempt $i failed"
              if [ $i -eq 3 ]; then
                echo "ERROR: Failed to download after 3 attempts"
                exit 1
              fi
              sleep 5
            fi
          done
          
          # 检查是否有运行中的 lobe-chat 进程
          echo "Checking for running lobe-chat process..."
          OLD_PIDS=$(pgrep -f "/opt/lobe-chat/lobe-chat.bin" || true)
          
          if [ ! -z "${OLD_PIDS}" ]; then
            echo "Found running process(es): ${OLD_PIDS}"
            echo "Stopping old process(es)..."
            # 优雅关闭，然后强制关闭
            kill ${OLD_PIDS} 2>/dev/null || true
            sleep 3
            kill -9 ${OLD_PIDS} 2>/dev/null || true
            echo "All old processes stopped"
          else
            echo "No running process found"
          fi
          
          # 创建目标目录
          ${SUDO_CMD} mkdir -p /opt/lobe-chat/logs
          
          # 备份旧版本
          if [ -f "/opt/lobe-chat/lobe-chat.bin" ]; then
            BACKUP_NAME="lobe-chat.bin.backup.$(date +%Y%m%d_%H%M%S)"
            echo "Backing up old version to ${BACKUP_NAME}"
            ${SUDO_CMD} mv /opt/lobe-chat/lobe-chat.bin /opt/lobe-chat/${BACKUP_NAME}
          fi
          
          # 移动新版本
          echo "Installing new version..."
          ${SUDO_CMD} mv lobe-chat.bin /opt/lobe-chat/lobe-chat.bin
          ${SUDO_CMD} chmod +x /opt/lobe-chat/lobe-chat.bin
          
          # 清理
          cd /
          rm -rf ${TEMP_DIR}
          
          # 构建启动命令
          echo "Building startup command..."
          START_CMD="/opt/lobe-chat/lobe-chat.bin"
          if [ ! -z "${LOBE_CHAT_ENV}" ]; then
            if echo "${LOBE_CHAT_ENV}" | grep -q "^\-e "; then
              START_CMD="${START_CMD} ${LOBE_CHAT_ENV}"
            else
              ENV_ARGS=""
              for env_pair in ${LOBE_CHAT_ENV}; do
                if [ ! -z "$env_pair" ] && echo "$env_pair" | grep -q '='; then
                  ENV_ARGS="${ENV_ARGS} -e ${env_pair}"
                fi
              done
              START_CMD="${START_CMD} ${ENV_ARGS}"
            fi
          fi
          
          LOG_FILE="/opt/lobe-chat/lobe-chat.log"
          
          # [修复] 使用 nohup 替换 setsid 来启动服务
          echo "Starting lobe-chat service using nohup..."
          nohup ${START_CMD} > ${LOG_FILE} 2>&1 &
          
          # [修复] 增强健康检查，检查进程和端口
          echo "Service starting, waiting for initialization... (up to 20s)"
          SUCCESS=false
          for i in {1..10}; do
            # 检查进程是否存在 并且 端口 3210 是否在监听
            if pgrep -f "/opt/lobe-chat/lobe-chat.bin" > /dev/null && ss -tlpn | grep -q ':3210'; then
              echo "✅ Service is running and listening on port 3210."
              SUCCESS=true
              break
            fi
            echo "Waiting for service to be ready... ($i/10)"
            sleep 2
          done
          
          # 根据最终检查结果判断成功或失败
          if [ "${SUCCESS}" = "true" ]; then
            FINAL_PIDS=$(pgrep -f "/opt/lobe-chat/lobe-chat.bin")
            echo "========================================="
            echo "Deployment successful!"
            echo "Process PID(s): ${FINAL_PIDS}"
            echo "Version: ${VERSION_TAG}"
            echo "========================================="
            echo ""
            echo "Startup logs (last 20 lines):"
            echo "-----------------------------------------"
            tail -n 20 ${LOG_FILE} 2>/dev/null || true
            echo "-----------------------------------------"
            exit 0
          else
            echo "========================================="
            echo "❌ ERROR: Deployment Failed"
            echo "========================================="
            echo "Service failed to start or listen on port 3210."
            echo ""
            echo "Error logs (last 50 lines):"
            echo "-----------------------------------------"
            tail -n 50 ${LOG_FILE} 2>/dev/null || true
            echo "-----------------------------------------"
            exit 1
          fi
          EOF

          # 使用 sshpass 执行部署脚本
          echo "::group::Executing deployment on ${SERVER_HOST}"
          
          if sshpass -p "${SERVER_PASSWORD}" ssh -o StrictHostKeyChecking=no -o ConnectTimeout=30 -p ${SERVER_PORT} ${SERVER_USER}@${SERVER_HOST} \
            "bash -s" < deploy.sh "${VERSION_TAG}" "${LOBE_CHAT_ENV}"; then
            echo "DEPLOYMENT_SUCCESS=true" >> $GITHUB_ENV
            echo "::notice ::✅ Deployment to ${SERVER_HOST} completed successfully"
          else
            echo "DEPLOYMENT_SUCCESS=false" >> $GITHUB_ENV
            echo "::error ::❌ Deployment to ${SERVER_HOST} failed"
            exit 1
          fi
          
          echo "::endgroup::"

      - name: Send Telegram notification
        if: env.DEPLOYMENT_SUCCESS == 'true'
        env:
          TELEGRAM_BOT_TOKEN: ${{ secrets.TELEGRAM_BOT_TOKEN }}
          TELEGRAM_CHAT_ID: ${{ secrets.TELEGRAM_CHAT_ID }}
          VERSION_TAG: ${{ needs.pack-binaries.outputs.version_tag }}
          SERVER_NAME: ${{ matrix.server }}
        run: |
          if [ ! -z "${TELEGRAM_BOT_TOKEN}" ] && [ ! -z "${TELEGRAM_CHAT_ID}" ]; then
            echo "Sending Telegram notification..."
            MESSAGE=$(cat <<-END
            {
              "chat_id": "${TELEGRAM_CHAT_ID}",
              "parse_mode": "Markdown",
              "disable_web_page_preview": true,
              "text": "🚀 *Lobe Chat Deployment Success*\n\n📦 *Version:* \`${VERSION_TAG}\`\n🖥️ *Server:* ${SERVER_NAME}\n⏰ *Time:* $(date -u '+%Y-%m-%d %H:%M:%S UTC')\n✅ *Status:* Deployed and running\n\n🔗 [View Release](https://github.com/ssfun/lobe-chat-database/releases/tag/${VERSION_TAG})"
            }
            END
            )
            
            curl -s -X POST "https://api.telegram.org/bot${TELEGRAM_BOT_TOKEN}/sendMessage" \
              -H "Content-Type: application/json" \
              -d "${MESSAGE}"
          fi

  notify-failure:
    needs: [pack-binaries, deploy-to-server]
    if: |
      always() && 
      (needs.pack-binaries.result == 'failure' || needs.deploy-to-server.result == 'failure')
    runs-on: ubuntu-latest
    steps:
      - name: Send failure notification
        env:
          TELEGRAM_BOT_TOKEN: ${{ secrets.TELEGRAM_BOT_TOKEN }}
          TELEGRAM_CHAT_ID: ${{ secrets.TELEGRAM_CHAT_ID }}
        run: |
          if [ ! -z "${TELEGRAM_BOT_TOKEN}" ] && [ ! -z "${TELEGRAM_CHAT_ID}" ]; then
            FAILED_STAGE=""
            if [ "${{ needs.pack-binaries.result }}" == "failure" ]; then
              FAILED_STAGE="Pack & Release"
            elif [ "${{ needs.deploy-to-server.result }}" == "failure" ]; then
              FAILED_STAGE="Deployment"
            else
              FAILED_STAGE="Unknown"
            fi
            
            MESSAGE=$(cat <<-END
            {
              "chat_id": "${TELEGRAM_CHAT_ID}",
              "parse_mode": "Markdown",
              "text": "❌ *Lobe Chat Pipeline Failed*\n\n⚠️ *Failed Stage:* ${FAILED_STAGE}\n⏰ *Time:* $(date -u '+%Y-%m-%d %H:%M:%S UTC')\n📝 *Workflow:* ${{ github.workflow }}\n🔗 [View Details](${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }})"
            }
            END
            )
            
            curl -s -X POST "https://api.telegram.org/bot${TELEGRAM_BOT_TOKEN}/sendMessage" \
              -H "Content-Type: application/json" \
              -d "${MESSAGE}"
          fi
