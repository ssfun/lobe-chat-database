name: Pack & Release Portable Binary

on:
  workflow_dispatch:

permissions:
  contents: write

jobs:
  pack-and-release:
    runs-on: ubuntu-latest
    outputs:
      should_pack: ${{ steps.version_check.outputs.should_pack }}
      github_tag: ${{ steps.get_github_tag.outputs.tag }}
      docker_tag: ${{ steps.get_docker_tag.outputs.tag }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Get latest sfun/lobe-chat docker tag
        id: get_docker_tag
        run: |
          LATEST_TAG=$(curl -s 'https://registry.hub.docker.com/v2/repositories/sfun/lobe-chat/tags?page_size=1&ordering=last_updated' | jq -r '.results[0].name')
          echo "LATEST_TAG=$LATEST_TAG" >> $GITHUB_ENV
          echo "tag=$LATEST_TAG" >> $GITHUB_OUTPUT
          echo "Docker latest tag: $LATEST_TAG"

      - name: Get latest ssfun/lobe-chat-database GitHub release tag
        id: get_github_tag
        run: |
          GITHUB_TAG=$(curl -s 'https://api.github.com/repos/ssfun/lobe-chat-database/releases/latest' | jq -r '.tag_name')
          echo "GITHUB_TAG=$GITHUB_TAG" >> $GITHUB_ENV
          echo "tag=$GITHUB_TAG" >> $GITHUB_OUTPUT
          echo "GitHub latest tag: $GITHUB_TAG"

      - name: Compare versions and decide if packing is needed
        id: version_check
        run: |
          # 移除可能的 'v' 前缀以进行版本比较
          DOCKER_VERSION="${DOCKER_TAG#v}"
          GITHUB_VERSION="${GITHUB_TAG#v}"
          
          echo "Comparing versions:"
          echo "Docker version: $DOCKER_VERSION"
          echo "GitHub version: $GITHUB_VERSION"
          
          # 使用 sort -V 进行版本比较
          if [ "$(printf '%s\n' "$DOCKER_VERSION" "$GITHUB_VERSION" | sort -V | head -n1)" = "$GITHUB_VERSION" ] && [ "$DOCKER_VERSION" != "$GITHUB_VERSION" ]; then
            echo "Docker version ($DOCKER_VERSION) is newer than GitHub version ($GITHUB_VERSION)"
            echo "should_pack=true" >> $GITHUB_OUTPUT
          else
            echo "Docker version ($DOCKER_VERSION) is not newer than GitHub version ($GITHUB_VERSION)"
            echo "should_pack=false" >> $GITHUB_OUTPUT
          fi

  pack-binaries:
    needs: pack-and-release
    if: needs.pack-and-release.outputs.should_pack == 'true'
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up dependencies for dockerc
        run: |
          sudo apt-get update
          sudo apt-get install -y fuse overlayroot squashfs-tools skopeo jq curl

      - name: Download dockerc
        run: |
          wget -O dockerc https://github.com/NilsIrl/dockerc/releases/download/v0.3.2/dockerc_x86-64
          chmod +x ./dockerc

      - name: Pack sfun/lobe-chat:${{ needs.pack-and-release.outputs.docker_tag }} for linux/amd64
        run: |
          ./dockerc --image docker://sfun/lobe-chat:${{ needs.pack-and-release.outputs.docker_tag }} --arch amd64 --output lobe-chat-${{ needs.pack-and-release.outputs.docker_tag }}-linux-amd64.bin

      - name: Pack sfun/lobe-chat:${{ needs.pack-and-release.outputs.docker_tag }} for linux/arm64
        run: |
          ./dockerc --image docker://sfun/lobe-chat:${{ needs.pack-and-release.outputs.docker_tag }} --arch arm64 --output lobe-chat-${{ needs.pack-and-release.outputs.docker_tag }}-linux-arm64.bin

      - name: Upload all bins to Release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ needs.pack-and-release.outputs.docker_tag }}
          files: |
            lobe-chat-${{ needs.pack-and-release.outputs.docker_tag }}-linux-amd64.bin
            lobe-chat-${{ needs.pack-and-release.outputs.docker_tag }}-linux-arm64.bin
          token: ${{ secrets.GITHUB_TOKEN }}
          title: "Release ${{ needs.pack-and-release.outputs.docker_tag }}"
          body: |
            Automated release for lobe-chat ${{ needs.pack-and-release.outputs.docker_tag }}
            
            Docker image version: ${{ needs.pack-and-release.outputs.docker_tag }}
            Previous GitHub release: ${{ needs.pack-and-release.outputs.github_tag }}
            
            This release contains portable binary executables packed from the Docker image.
